{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as React from 'react';\nimport WAVEInterface from './waveInterface';\nimport downloadBlob from './downloadBlob';\n;\n;\n\nvar AudioRecorder =\n/** @class */\nfunction (_super) {\n  __extends(AudioRecorder, _super);\n\n  function AudioRecorder() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.waveInterface = new WAVEInterface();\n    _this.state = {\n      isRecording: false,\n      isPlaying: false,\n      audioData: _this.props.initialAudio\n    };\n\n    _this.onAudioEnded = function () {\n      _this.setState({\n        isPlaying: false\n      });\n\n      if (_this.props.onEnded) _this.props.onEnded();\n    };\n\n    _this.onRemoveClick = function () {\n      _this.waveInterface.reset();\n\n      if (_this.state.audioData && _this.props.onChange) _this.props.onChange({\n        duration: 0,\n        audioData: null\n      });\n\n      _this.setState({\n        isPlaying: false,\n        isRecording: false,\n        audioData: null\n      });\n    };\n\n    _this.onDownloadClick = function () {\n      return downloadBlob(_this.state.audioData, _this.props.filename);\n    };\n\n    _this.onButtonClick = function (event) {\n      if (_this.state.audioData) {\n        if (_this.state.isPlaying) {\n          _this.stopPlayback();\n\n          event.preventDefault();\n        } else {\n          _this.startPlayback();\n        }\n      } else {\n        if (_this.state.isRecording) {\n          _this.stopRecording();\n        } else {\n          _this.startRecording();\n        }\n      }\n    };\n\n    return _this;\n  }\n\n  AudioRecorder.prototype.componentWillReceiveProps = function (nextProps) {\n    // handle new initialAudio being passed in\n    if (nextProps.initialAudio && nextProps.initialAudio !== this.props.initialAudio && this.state.audioData && nextProps.initialAudio !== this.state.audioData) {\n      this.waveInterface.reset();\n      this.setState({\n        audioData: nextProps.initialAudio,\n        isPlaying: false,\n        isRecording: false\n      });\n    }\n  };\n\n  AudioRecorder.prototype.componentWillMount = function () {\n    this.waveInterface.reset();\n  };\n\n  AudioRecorder.prototype.componentWillUnmount = function () {\n    this.waveInterface.reset();\n  };\n\n  AudioRecorder.prototype.startRecording = function () {\n    var _this = this;\n\n    if (!this.state.isRecording) {\n      this.waveInterface.startRecording().then(function () {\n        _this.setState({\n          isRecording: true\n        });\n\n        if (_this.props.onRecordStart) _this.props.onRecordStart();\n      }).catch(function (err) {\n        throw err;\n      });\n    }\n  };\n\n  AudioRecorder.prototype.stopRecording = function () {\n    this.waveInterface.stopRecording();\n    this.setState({\n      isRecording: false,\n      audioData: this.waveInterface.audioData\n    });\n\n    if (this.props.onChange) {\n      this.props.onChange({\n        duration: this.waveInterface.audioDuration,\n        audioData: this.waveInterface.audioData\n      });\n    }\n  };\n\n  AudioRecorder.prototype.startPlayback = function () {\n    var _this = this;\n\n    if (!this.state.isPlaying) {\n      this.waveInterface.startPlayback(this.props.loop, this.onAudioEnded).then(function () {\n        _this.setState({\n          isPlaying: true\n        });\n\n        if (_this.props.onPlay) _this.props.onPlay();\n      });\n    }\n  };\n\n  AudioRecorder.prototype.stopPlayback = function () {\n    this.waveInterface.stopPlayback();\n    this.setState({\n      isPlaying: false\n    });\n    if (this.props.onAbort) this.props.onAbort();\n  };\n\n  AudioRecorder.prototype.render = function () {\n    return React.createElement(\"div\", {\n      className: \"AudioRecorder\"\n    }, React.createElement(\"button\", {\n      className: ['AudioRecorder-button', this.state.audioData ? 'hasAudio' : '', this.state.isPlaying ? 'isPlaying' : '', this.state.isRecording ? 'isRecording' : ''].join(' '),\n      onClick: this.onButtonClick\n    }, this.state.audioData && !this.state.isPlaying && this.props.playLabel, this.state.audioData && this.state.isPlaying && this.props.playingLabel, !this.state.audioData && !this.state.isRecording && this.props.recordLabel, !this.state.audioData && this.state.isRecording && this.props.recordingLabel), this.state.audioData && React.createElement(\"button\", {\n      className: \"AudioRecorder-remove\",\n      onClick: this.onRemoveClick\n    }, this.props.removeLabel), this.state.audioData && this.props.downloadable && React.createElement(\"button\", {\n      className: \"AudioRecorder-download\",\n      onClick: this.onDownloadClick\n    }, this.props.downloadLabel));\n  };\n\n  AudioRecorder.defaultProps = {\n    loop: false,\n    downloadable: true,\n    className: '',\n    style: {},\n    filename: 'output.wav',\n    playLabel: 'üîä Play',\n    playingLabel: '‚ùö‚ùö Playing',\n    recordLabel: '‚óè Record',\n    recordingLabel: '‚óè Recording',\n    removeLabel: '‚úñ Remove',\n    downloadLabel: \"\\uD83D\\uDCBE Save\" // unicode floppy disk\n\n  };\n  return AudioRecorder;\n}(React.Component);\n\nexport default AudioRecorder;","map":null,"metadata":{},"sourceType":"module"}