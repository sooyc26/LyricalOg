{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.default = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _MicrophoneRecorder = require('../libs/MicrophoneRecorder');\n\nvar _AudioContext = require('../libs/AudioContext');\n\nvar _AudioContext2 = _interopRequireDefault(_AudioContext);\n\nvar _AudioPlayer = require('../libs/AudioPlayer');\n\nvar _AudioPlayer2 = _interopRequireDefault(_AudioPlayer);\n\nvar _Visualizer = require('../libs/Visualizer');\n\nvar _Visualizer2 = _interopRequireDefault(_Visualizer);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // cool blog article on how to do this: http://www.smartjava.org/content/exploring-html5-web-audio-visualizing-sound\n// https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Visualizations_with_Web_Audio_API\n// distortion curve for the waveshaper, thanks to Kevin Ennis\n// http://stackoverflow.com/questions/22312841/waveshaper-node-in-webaudio-how-to-emulate-distortion\n\n\nvar ReactMic = function (_Component) {\n  _inherits(ReactMic, _Component);\n\n  function ReactMic(props) {\n    _classCallCheck(this, ReactMic);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.visualize = function () {\n      var self = _this;\n      var _this$props = _this.props,\n          backgroundColor = _this$props.backgroundColor,\n          strokeColor = _this$props.strokeColor,\n          width = _this$props.width,\n          height = _this$props.height,\n          visualSetting = _this$props.visualSetting;\n      var _this$state = _this.state,\n          canvas = _this$state.canvas,\n          canvasCtx = _this$state.canvasCtx,\n          analyser = _this$state.analyser;\n\n      if (visualSetting === 'sinewave') {\n        _Visualizer2.default.visualizeSineWave(analyser, canvasCtx, canvas, width, height, backgroundColor, strokeColor);\n      } else if (visualSetting === 'frequencyBars') {\n        _Visualizer2.default.visualizeFrequencyBars(analyser, canvasCtx, canvas, width, height, backgroundColor, strokeColor);\n      }\n    };\n\n    _this.state = {\n      analyser: null,\n      microphoneRecorder: null,\n      canvas: null,\n      canvasCtx: null\n    };\n    return _this;\n  }\n\n  ReactMic.prototype.componentDidMount = function componentDidMount() {\n    var _this2 = this;\n\n    var _props = this.props,\n        onSave = _props.onSave,\n        onStop = _props.onStop,\n        onStart = _props.onStart,\n        onData = _props.onData,\n        audioElem = _props.audioElem,\n        audioBitsPerSecond = _props.audioBitsPerSecond,\n        mimeType = _props.mimeType;\n    var visualizer = this.refs.visualizer;\n    var canvas = visualizer;\n    var canvasCtx = canvas.getContext(\"2d\");\n    var options = {\n      audioBitsPerSecond: audioBitsPerSecond,\n      mimeType: mimeType\n    };\n\n    if (audioElem) {\n      var analyser = _AudioContext2.default.getAnalyser();\n\n      _AudioPlayer2.default.create(audioElem);\n\n      this.setState({\n        analyser: analyser,\n        canvas: canvas,\n        canvasCtx: canvasCtx\n      }, function () {\n        _this2.visualize();\n      });\n    } else {\n      var _analyser = _AudioContext2.default.getAnalyser();\n\n      this.setState({\n        analyser: _analyser,\n        microphoneRecorder: new _MicrophoneRecorder.MicrophoneRecorder(onStart, onStop, onSave, onData, options),\n        canvas: canvas,\n        canvasCtx: canvasCtx\n      }, function () {\n        _this2.visualize();\n      });\n    }\n  };\n\n  ReactMic.prototype.clear = function clear() {\n    var _props2 = this.props,\n        width = _props2.width,\n        height = _props2.height;\n    var canvasCtx = this.state.canvasCtx;\n    canvasCtx.clearRect(0, 0, width, height);\n  };\n\n  ReactMic.prototype.render = function render() {\n    var _props3 = this.props,\n        record = _props3.record,\n        onStop = _props3.onStop,\n        width = _props3.width,\n        height = _props3.height;\n    var _state = this.state,\n        analyser = _state.analyser,\n        microphoneRecorder = _state.microphoneRecorder,\n        canvasCtx = _state.canvasCtx;\n\n    if (record) {\n      if (microphoneRecorder) {\n        microphoneRecorder.startRecording();\n      }\n    } else {\n      if (microphoneRecorder) {\n        microphoneRecorder.stopRecording(onStop);\n        this.clear();\n      }\n    }\n\n    return _react2.default.createElement('canvas', {\n      ref: 'visualizer',\n      height: height,\n      width: width,\n      className: this.props.className\n    });\n  };\n\n  return ReactMic;\n}(_react.Component);\n\nexports.default = ReactMic;\nprocess.env.NODE_ENV !== \"production\" ? ReactMic.propTypes = {\n  backgroundColor: _propTypes.string,\n  strokeColor: _propTypes.string,\n  className: _propTypes.string,\n  audioBitsPerSecond: _propTypes.number,\n  mimeType: _propTypes.string,\n  height: _propTypes.number,\n  record: _propTypes.bool.isRequired,\n  onStop: _propTypes.func,\n  onData: _propTypes.func\n} : void 0;\nReactMic.defaultProps = {\n  backgroundColor: 'rgba(255, 255, 255, 0.5)',\n  strokeColor: '#000000',\n  className: 'visualizer',\n  audioBitsPerSecond: 128000,\n  mimeType: 'audio/webm;codecs=opus',\n  record: false,\n  width: 640,\n  height: 100,\n  visualSetting: 'sinewave'\n};\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}