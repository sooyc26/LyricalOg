{"ast":null,"code":"function writeUTFBytes(dataview, offset, string) {\n  for (var i = 0; i < string.length; i++) {\n    dataview.setUint8(offset + i, string.charCodeAt(i));\n  }\n}\n\nfunction mergeBuffers(buffer, length) {\n  var result = new Float64Array(length);\n  var offset = 0;\n\n  for (var i = 0; i < buffer.length; i++) {\n    var inner = buffer[i];\n    result.set(inner, offset);\n    offset += inner.length;\n  }\n\n  return result;\n}\n\nfunction interleave(left, right) {\n  var length = left.length + right.length;\n  var result = new Float64Array(length);\n  var inputIndex = 0;\n\n  for (var i = 0; i < length;) {\n    result[i++] = left[inputIndex];\n    result[i++] = right[inputIndex];\n    inputIndex++;\n  }\n\n  return result;\n}\n\nexport default function encodeWAV(buffers, bufferLength, sampleRate, volume) {\n  if (volume === void 0) {\n    volume = 1;\n  }\n\n  var left = mergeBuffers(buffers[0], bufferLength);\n  var right = mergeBuffers(buffers[1], bufferLength);\n  var interleaved = interleave(left, right);\n  var buffer = new ArrayBuffer(44 + interleaved.length * 2);\n  var view = new DataView(buffer);\n  writeUTFBytes(view, 0, 'RIFF');\n  view.setUint32(4, 44 + interleaved.length * 2, true);\n  writeUTFBytes(view, 8, 'WAVE');\n  writeUTFBytes(view, 12, 'fmt ');\n  view.setUint32(16, 16, true);\n  view.setUint16(20, 1, true);\n  view.setUint16(22, 2, true);\n  view.setUint32(24, sampleRate, true);\n  view.setUint32(28, sampleRate * 4, true);\n  view.setUint16(32, 4, true);\n  view.setUint16(34, 16, true);\n  writeUTFBytes(view, 36, 'data');\n  view.setUint32(40, interleaved.length * 2, true);\n  interleaved.forEach(function (sample, index) {\n    view.setInt16(44 + index * 2, sample * (0x7fff * volume), true);\n  });\n  return new Blob([view], {\n    type: 'audio/wav'\n  });\n}","map":null,"metadata":{},"sourceType":"module"}