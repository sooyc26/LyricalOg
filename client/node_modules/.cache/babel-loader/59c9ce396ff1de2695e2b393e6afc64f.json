{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.MicrophoneRecorder = undefined;\n\nvar _AudioContext = require('./AudioContext');\n\nvar _AudioContext2 = _interopRequireDefault(_AudioContext);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar analyser = void 0;\nvar audioCtx = void 0;\nvar mediaRecorder = void 0;\nvar chunks = [];\nvar startTime = void 0;\nvar stream = void 0;\nvar mediaOptions = void 0;\nvar blobObject = void 0;\nvar onStartCallback = void 0;\nvar onStopCallback = void 0;\nvar onSaveCallback = void 0;\nvar onDataCallback = void 0;\nvar constraints = {\n  audio: true,\n  video: false\n}; // constraints - only audio needed\n\nnavigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;\n\nvar MicrophoneRecorder = exports.MicrophoneRecorder = function () {\n  function MicrophoneRecorder(onStart, onStop, onSave, onData, options) {\n    var _this = this;\n\n    _classCallCheck(this, MicrophoneRecorder);\n\n    this.startRecording = function () {\n      startTime = Date.now();\n\n      if (mediaRecorder) {\n        if (audioCtx && audioCtx.state === 'suspended') {\n          audioCtx.resume();\n        }\n\n        if (mediaRecorder && mediaRecorder.state === 'paused') {\n          mediaRecorder.resume();\n          return;\n        }\n\n        if (audioCtx && mediaRecorder && mediaRecorder.state === 'inactive') {\n          mediaRecorder.start(10);\n          var source = audioCtx.createMediaStreamSource(stream);\n          source.connect(analyser);\n\n          if (onStartCallback) {\n            onStartCallback();\n          }\n\n          ;\n        }\n      } else {\n        if (navigator.mediaDevices) {\n          console.log('getUserMedia supported.');\n          navigator.mediaDevices.getUserMedia(constraints).then(function (str) {\n            stream = str;\n\n            if (MediaRecorder.isTypeSupported(mediaOptions.mimeType)) {\n              mediaRecorder = new MediaRecorder(str, mediaOptions);\n            } else {\n              mediaRecorder = new MediaRecorder(str);\n            }\n\n            if (onStartCallback) {\n              onStartCallback();\n            }\n\n            ;\n            mediaRecorder.onstop = _this.onStop;\n\n            mediaRecorder.ondataavailable = function (event) {\n              chunks.push(event.data);\n\n              if (onDataCallback) {\n                onDataCallback(event.data);\n              }\n            };\n\n            audioCtx = _AudioContext2.default.getAudioContext();\n            analyser = _AudioContext2.default.getAnalyser();\n            audioCtx.resume();\n            mediaRecorder.start(10);\n            var source = audioCtx.createMediaStreamSource(stream);\n            source.connect(analyser);\n          });\n        } else {\n          alert('Your browser does not support audio recording');\n        }\n      }\n    };\n\n    onStartCallback = onStart;\n    onStopCallback = onStop;\n    onSaveCallback = onSave;\n    onDataCallback = onData;\n    mediaOptions = options;\n  }\n\n  MicrophoneRecorder.prototype.stopRecording = function stopRecording() {\n    if (mediaRecorder && mediaRecorder.state !== 'inactive') {\n      mediaRecorder.stop();\n      stream.getAudioTracks().forEach(function (track) {\n        track.stop();\n      });\n      mediaRecorder = null;\n      audioCtx.suspend();\n    }\n  };\n\n  MicrophoneRecorder.prototype.onStop = function onStop(evt) {\n    var blob = new Blob(chunks, {\n      'type': mediaOptions.mimeType\n    });\n    chunks = [];\n    var blobObject = {\n      blob: blob,\n      startTime: startTime,\n      stopTime: Date.now(),\n      options: mediaOptions,\n      blobURL: window.URL.createObjectURL(blob)\n    };\n\n    if (onStopCallback) {\n      onStopCallback(blobObject);\n    }\n\n    ;\n\n    if (onSaveCallback) {\n      onSaveCallback(blobObject);\n    }\n\n    ;\n  };\n\n  return MicrophoneRecorder;\n}();","map":null,"metadata":{},"sourceType":"script"}